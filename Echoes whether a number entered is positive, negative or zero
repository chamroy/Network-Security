//server side

import java.net.*;
import java.io.*;

class NumberServer {
    public static void main(String args[]) throws Exception {
        // Create a ServerSocket object on port 5217
        ServerSocket s = new ServerSocket(5217);
        while(true) {
            System.out.println("Waiting For Connection ...");
            // Accept connections from clients
            Socket soc = s.accept();

            // Create a BufferedReader object to read data from the input stream of the client socket
            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));

            // Read the number from the client
            int num = Integer.parseInt(in.readLine());

            // Determine whether the number is positive, negative, or zero
            String result;
            if (num > 0) {
                result = "The number is positive.";
            } else if (num < 0) {
                result = "The number is negative.";
            } else {
                result = "The number is zero.";
            }

            // Create a DataOutputStream object to write data to the output stream of the client socket
            DataOutputStream out = new DataOutputStream(soc.getOutputStream());

            // Write the result to the output stream
            out.writeBytes(result + "\n");

            // Close the input stream, output stream, and the client socket
            in.close();
            out.close();
            soc.close();
        }
    }
}
//client side
import java.net.*;
import java.io.*;

public class NumberClient {
    public static void main(String args[]) throws Exception {
        // Create a Socket object to connect to the server
        Socket soc = new Socket("localhost", 5217);

        // Create a BufferedReader object to read data from the console
        BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));

        // Read a number from the console
        System.out.println("Enter a number:");
        String str = keyboard.readLine();

        // Create a DataOutputStream object to write data to the output stream of the server socket
        DataOutputStream out = new DataOutputStream(soc.getOutputStream());

        // Write the number to the output stream
        out.writeBytes(str + "\n");

        // Create a BufferedReader object to read data from the input stream of the server socket
        BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));

        // Read the server's response and print it
        System.out.println(in.readLine());

        // Close the input stream, output stream, and the client socket
        keyboard.close();
        in.close();
        out.close();
        soc.close();
    }
}
