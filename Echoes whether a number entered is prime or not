//server
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

class NumberServer{
    public static boolean isPrime(int num){
        if(num <= 1){
            return false;
        }
        for (int i = 2; i*i <=num; i++){
            if(num % i == 0){
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) throws Exception{
        ServerSocket s = new ServerSocket(1234);
        while(true){
            System.out.println("waiting for connection....");
            Socket soc = s.accept();

            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            int num = Integer.parseInt(in.readLine());

            String result;
            if(isPrime(num)){
                result = "The number is prime.";
            } else {
                result = "The number is not prime";
            }

            DataOutputStream out = new DataOutputStream(soc.getOutputStream());
            out.writeBytes(result + "\n");
            in.close();;
            out.close();
            soc.close();
        }

    }
}
//client
import java.net.*;
import java.io.*;

class NumberClient {
    public static void main(String args[]) throws Exception {
        // Connect to the server on port 5217
        Socket soc = new Socket("localhost", 5217);

        // Create a BufferedReader to read user input
        BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter a number: ");
        String number = userInput.readLine();

        // Send the number to the server
        DataOutputStream out = new DataOutputStream(soc.getOutputStream());
        out.writeBytes(number + "\n");

        // Receive the result from the server
        BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
        String result = in.readLine();
        System.out.println(result);

        // Close the streams and the socket
        userInput.close();
        out.close();
        in.close();
        soc.close();
    }
}
