//server
import java.net.*;
import java.io.*;
import java.nio.file.*;

class NumberServer {
    public static void main(String args[]) throws Exception {
        ServerSocket s = new ServerSocket(1234);
        while(true) {
            System.out.println("Waiting For Connection ...");
            Socket soc = s.accept();

            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            String dirPath = in.readLine();

            Path path = Paths.get(dirPath);
            StringBuilder result = new StringBuilder();
            if (Files.exists(path) && Files.isDirectory(path)) {
                Files.list(path).forEach(file -> {
                    if (Files.isDirectory(file)) {
                        result.append("Directory: ").append(file.getFileName()).append("\n");
                    } else {
                        result.append("File: ").append(file.getFileName()).append("\n");
                    }
                });
            } else {
                result.append("The directory does not exist.");
            }

            DataOutputStream out = new DataOutputStream(soc.getOutputStream());
            out.writeBytes(result.toString());

            in.close();
            out.close();
            soc.close();
        }
    }
}
//client

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;

public class NumberClient {
    public static void main(String[] args) throws Exception {

        Socket soc = new Socket("localhost", 1234);
        BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter a directory path: ");
        String dirPath = keyboard.readLine();

        DataOutputStream out = new DataOutputStream(soc.getOutputStream());
        out.writeBytes(dirPath + "\n");
        BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
        String result = in.readLine();
        System.out.println(result);

        keyboard.close();
        out.close();
        in.close();
        soc.close();

    }
}
